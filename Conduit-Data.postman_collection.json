{
	"info": {
		"_postman_id": "0e529ddf-5d13-4445-b36c-6c5f8683f653",
		"name": "Conduit-Data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (!(environment.isIntegrationTest)) {",
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
							"",
							"var user = responseJSON.user || {};",
							"",
							"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
							"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
							"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
							"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
							"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"user\":{\"email\":\"jake@jake.jake\", \"password\":\"jakejake\", \"username\":\"johnjacob\"}}"
				},
				"url": {
					"raw": "{{apiUrl}}/users",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register-2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (!(environment.isIntegrationTest)) {",
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
							"",
							"var user = responseJSON.user || {};",
							"",
							"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
							"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
							"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
							"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
							"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"user\":{\"email\":\"user1@user.com\", \"password\":\"user1234\", \"username\":\"user1\"}}"
				},
				"url": {
					"raw": "{{apiUrl}}/users",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login and Remember Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
							"",
							"var user = responseJSON.user || {};",
							"",
							"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
							"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
							"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
							"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
							"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
							"",
							"if(tests['User has \"token\" property']){",
							"    postman.setEnvironmentVariable('token', user.token);",
							"}",
							"",
							"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"user\":{\"email\":\"jake@jake.jake\", \"password\":\"jakejake\"}}"
				},
				"url": {
					"raw": "{{apiUrl}}/users/login",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Article",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
							"",
							"var article = responseJSON.article || {};",
							"",
							"tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
							"tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
							"tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
							"tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
							"tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
							"tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
							"tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
							"tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
							"tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
							"tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
							"tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
							"tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
							"tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
							"tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					},
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
				},
				"url": {
					"raw": "{{apiUrl}}/articles",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"articles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Article - 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
							"",
							"var article = responseJSON.article || {};",
							"",
							"tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
							"tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
							"tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
							"tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
							"tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
							"tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
							"tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
							"tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
							"tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
							"tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
							"tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
							"tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
							"tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
							"tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					},
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"article\":{\"title\":\"Demo article\", \"description\":\"Tis article\", \"body\":\"This is demo article nothing to see here\", \"tagList\":[\"demo\",\"ddemo\"]}}"
				},
				"url": {
					"raw": "{{apiUrl}}/articles",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"articles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Article - 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var responseJSON = JSON.parse(responseBody);",
							"",
							"tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
							"",
							"var article = responseJSON.article || {};",
							"",
							"tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
							"tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
							"tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
							"tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
							"tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
							"tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
							"tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
							"tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
							"tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
							"tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
							"tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
							"tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
							"tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
							"tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest"
					},
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"article\":{\"title\":\"Lorem ipsum\", \"description\":\"This article\", \"body\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ultricies lacus a iaculis laoreet. Nullam imperdiet enim luctus, efficitur risus eget, lobortis nulla. Cras tristique est nisl, quis euismod neque vulputate a. Quisque ac maximus est. Phasellus faucibus lacus metus. Vestibulum pharetra aliquet convallis. Vestibulum id iaculis arcu, ut tempor tellus. Integer venenatis venenatis risus, non congue nisl pellentesque et. Vestibulum interdum ex quis maximus porta. Cras feugiat placerat nisl. Nullam mollis vitae eros quis laoreet.\", \"tagList\":[\"demo\",\"ddemo\"]}}"
				},
				"url": {
					"raw": "{{apiUrl}}/articles",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"articles"
					]
				}
			},
			"response": []
		}
	]
}